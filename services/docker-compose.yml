version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - common-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://kafka:29092,PLAINTEXT_EXTERNAL://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT_INTERNAL://0.0.0.0:29092,PLAINTEXT_EXTERNAL://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "29092"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - common-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
      - zookeeper
    networks:
      - common-network

  product-reviews-api:
    build:
      context: ./product-reviews-api
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=product_reviews
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
      - S3_BUCKET=product-reviews-api
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_REVIEWS_TOPIC=product-reviews-api
    depends_on:
      db:
        condition: service_started
      minio:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - common-network

  auto-moderation-api:
    build:
      context: ./auto-moderation-api
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - TEXT_MODERATION_URL=http://text-moderation-api:8002/moderate
      - IMAGE_MODERATION_URL=http://image-moderation-api:8003/moderate
    depends_on:
      text-moderation-api:
        condition: service_started
      image-moderation-api:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - common-network

  text-moderation-api:
    build:
      context: ./text-moderation-api
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - CUDA_VISIBLE_DEVICES=  # Disable GPU for now
    deploy:
      resources:
        limits:
          memory: 2G
    networks:
      - common-network

  image-moderation-api:
    build:
      context: ./image-moderation-api
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - CUDA_VISIBLE_DEVICES=  # Disable GPU for now
    deploy:
      resources:
        limits:
          memory: 2G
    networks:
      - common-network

  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=product_reviews
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - common-network

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001" --address ":9000"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_BROWSER=on
      - MINIO_PUBLIC_BUCKETS=product-reviews-api
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - common-network

volumes:
  postgres_data:
  minio_data:
  kafka_data:

networks:
  common-network:
    driver: bridge